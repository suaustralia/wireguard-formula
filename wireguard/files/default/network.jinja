########################################################################
# File managed by Salt at <{{ source }}>.
# Your changes will be overwritten.
########################################################################

[Match]
Name={{ interface }}

[Network]
{%- set clientAddress = interface_config['Interface'].get('Address', '') %}
{%- if clientAddress %}
Address={{ clientAddress }}/32
{%- endif %}
# DNS Servers specific to this wiregaurd VPN
{%- for dnsServer in interface_config['Interface'].get('DNS', []) %}
DNS={{ dnsServer }}
{%- endfor %}
{%- if 'Domains' in interface_config['Interface'] %}
# Domains to push to our DNS servers (split DNS)
Domains={{ interface_config['Interface'].get('Domains') }}
{%- endif %}

{#- Find out if we are a ClientOnlyNode ourselves #}
{%- set ClientOnlyNode = interface_config.get('Peers', {}).get(grains['id'], {}).get('ClientOnlyNode', False) %}
{%- for peer_name, peer in interface_config.get('Peers', {}).items() %}
{#-   # Don't peer with ourself (by matching peer name) #}
{%-   if peer_name == grains['id'] %}
{%-     continue %}
{%-   endif %}
{#-   # Don't peer with another ClientOnlyNode if we are also a ClientOnlynode #}
{%-   if ClientOnlyNode and peer.get('ClientOnlyNode', False) %}
{%-     continue %}
{%-   endif %}
{%-   set endpoint = peer.get('Endpoint', False) %}
{%-   if endpoint %}
{%-     set address = endpoint.split(':')[0] %}
{#-     # Don't peer with ourself (by matching endpoint address) #}
{%-     if address in grains['ipv4'] or address in grains['ipv6'] %}
{%-       continue %}
{%-     endif %}
{%-   endif %}
{%-   set pubkey = peer.get('PublicKey', '') %}
{#-   # mine:node_id:interface #}
{%-   set parts = pubkey.split(':') %}
{%-   if parts|length() == 3 and parts[0] == 'mine' %}
{#-     # ignore your own pubkeys #}
{%-     if parts[1] == grains['id'] %}
{%-       continue %}
{%-     endif %}
{%-     set mined_node_pubkeys = salt['mine.get'](parts[1], 'public_wireguard_keys') %}
{%-     if mined_node_pubkeys %}
{%-       for line in mined_node_pubkeys[parts[1]].splitlines() %}
{#-         # 'interface public_key' #}
{%-         set key_parts = line.split(' ') %}
{%-         if parts[2] == key_parts[0] %}
{%-           do peer.update({"PublicKey": key_parts[1]}) %}
{%-         endif %}
{%-       endfor %}
{%-     else %}
{%-       continue %}
{%-     endif %}
{%-   endif %}

{% for route in peer.get('AllowedIPs', []) %}
[Route]
Destination={{ route }}
{% endfor %}


{%- endfor %}